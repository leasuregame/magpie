// Generated by CoffeeScript 1.6.3
(function() {
  var User, exports, logger, pomelo, userDao;

  pomelo = require('pomelo');

  User = require('../../../domain/user');

  logger = require('pomelo-logger').getLogger(__filename);

  userDao = {
    getUserByAccount: function(accout, cb) {
      return this._getUserBy('account', accout, cb);
    },
    getUserByName: function(username, cb) {
      return this._getUserBy('name', username, cb);
    },
    getUserById: function(uid, cb) {
      return this._getUserBy('id', uid, cb);
    },
    _getUserBy: function(field, value, cb) {
      var args, sql;
      sql = "select * from user where " + field + " = ?";
      args = [value];
      return pomelo.app.get('dbclient').query(sql, args, function(err, res) {
        var rs, user;
        if (err !== null) {
          logger.error('Get user by #{field} faild!', err.stack);
          cb(err.message, null);
          return;
        }
        if (!!res && res.length === 1) {
          rs = res[0];
          user = new User({
            id: rs.id,
            name: rs.name,
            password: rs.password,
            from: rs.from
          });
          return cb(null, user);
        } else {
          return cb(' User not exist ', null);
        }
      });
    },
    deleteUserById: function(id, cb) {
      return this._deleteUserBy('id', id, cb);
    },
    deleteUserByName: function(username, cb) {
      return this._deleteUserBy('name', username, cb);
    },
    deleteUserByAccount: function(account, cb) {
      return this._deleteUserBy('account', account, cb);
    },
    _deleteUserBy: function(field, value, cb) {
      var args, sql;
      sql = "delete from user where " + field + " = ?";
      args = [value];
      return pomelo.app.get('dbclient')["delete"](sql, args, function(err, res) {
        if (err !== null) {
          cb(err.message, null);
          return;
        }
        if (!!res && res.affectedRows > 0) {
          return cb(null, true);
        } else {
          return cb(null, false);
        }
      });
    },
    createUser: function(account, password, from, cb) {
      var args, now, sql;
      sql = 'insert into user (account, password, login_count, create_time, last_login_time, last_login_device) values(?,?,?,?,?,?)';
      now = Date.now();
      args = [account, password, 1, now, now, from || ''];
      return pomelo.app.get('dbclient').insert(sql, args, function(err, res) {
        var user;
        if (err !== null) {
          logger.error(' [Create user faild] ', err.stack);
          return cb({
            code: err.code,
            msg: err.message
          }, null);
        } else {
          user = new User({
            id: res.insertId,
            account: account,
            password: password,
            loginCount: 1,
            lastLoginTime: res.lastLoginTime
          });
          return cb(null, user);
        }
      });
    },
    updateUser: function(uid, fields, cb) {
      var args, f, setFields, sql, v;
      if ((uid != null) && (fields != null)) {
        setFields = '';
        for (f in fields) {
          v = fields[f];
          setFields += "SET " + f + "='" + v + "',";
        }
        sql = "update user " + (setFields.slice(0, -1)) + " where id = ?";
        args = [uid];
        return pomelo.app.get('dbclient').update(sql, args, function(err, res) {
          if (err !== null) {
            return cb({
              code: err.number,
              msg: err.message
            }, null);
          } else {
            return cb(null, res);
          }
        });
      }
    }
  };

  exports = module.exports = userDao;

}).call(this);

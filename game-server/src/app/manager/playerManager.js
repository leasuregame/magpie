// Generated by CoffeeScript 1.6.3
(function() {
  var Cache, Manager, async, dao, getActivatedCards, playerList;

  dao = require('pomelo').app.get('dao');

  Cache = require('../common/cache');

  async = require('async');

  playerList = new Cache();

  Manager = (function() {
    function Manager() {}

    Manager.createPlayer = function(uid, name, params, cb) {
      return dao.player.createPlayer(uid, name, params, function(err, player) {
        if (err !== null) {
          cb(err, null);
          return;
        }
        playerList.put(player.id, player);
        return cb(null, player);
      });
    };

    Manager.getPlayer = function(params, cb) {
      var _player;
      if (params.pid != null) {
        _player = playerList.get(params.pid);
        if (typeof player !== "undefined" && player !== null) {
          cb(null, _player);
          return;
        }
        dao.player.getPlayerById(params.pid, function(err, player) {
          if (err !== null) {
            cb(err, null);
            return;
          }
          playerList.put(player.id, player);
          cb(null, player);
        });
      }
      if (params.name != null) {

      }
    };

    Manager.getPlayerForFight = function(params, cb) {
      var player,
        _this = this;
      player = null;
      return async.waterfall([
        function(callback) {
          return _this.getPlayer(params, callback);
        }, function(player, callback) {
          player = player;
          return getActivatedCards(params, callback);
        }
      ], function(err, cards) {
        if (err !== null) {
          cb(err, null);
          return;
        }
        player.addCards(cards);
        return cb(null, player);
      });
    };

    return Manager;

  })();

  getActivatedCards = function(params, cb) {
    return dao.card.getCardByPlayersId(params.pid, {
      activated: 1
    }, function(err, cards) {
      if (err !== null) {
        cb(err, null);
        return;
      }
      return cb(null, cards);
    });
  };

  module.exports = Manager;

}).call(this);

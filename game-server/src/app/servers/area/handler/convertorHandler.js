// Generated by CoffeeScript 1.6.2
var Handler, async, canDissoleve, configData, doDissolveCard, job, playerManager, updateData, updateEntities, _,
  __slice = [].slice;

playerManager = require('pomelo').app.get('playerManager');

job = require('../../../dao/job');

configData = require('../../../../config/data');

async = require('async');

_ = require('underscore');

module.exports = function(app) {
  return new Handler(app);
};

Handler = function(app) {
  this.app = app;
};

Handler.prototype.usePill = function(msg, session, next) {
  var cardId, pill, player, playerId;

  playerId = session.get('playerId');
  cardId = msg.cardId;
  pill = msg.pill || 0;
  if (!cardId || !_.isNumber(cardId) || !_.isNumber(pill)) {
    return next(null, {
      code: 501,
      msg: 'wrong parameter'
    });
  }
  player = null;
  return async.waterFall([
    function(cb) {
      return playerManager.getPlayerInfo({
        pid: playerId
      }, cb);
    }, function(res, cb) {
      var card;

      player = res;
      if (player.lv < 50) {
        return cb({
          code: 501,
          msg: '50级开启'
        });
      }
      card = player.getCard(cardId);
      if (!card) {
        return cb({
          code: 501,
          msg: 'can find card'
        });
      }
      if (card.star < 4) {
        return cb({
          code: 501,
          msg: 'can use pill on card that star blow 4'
        });
      }
      card.increase('pill', pill);
      player.decrease('pill', pill);
      return updateEntities(['update', player, card], cb);
    }
  ], function(err) {
    if (err) {
      return next(null, {
        code: err.code || 500,
        msg: err.msg || ''
      });
    }
    return next(null, {
      code: 200,
      msg: {
        ability: card.ability()
      }
    });
  });
};

updateEntities = function() {
  var cb, entities, group, groups, jobs, type, _i, _j, _len;

  groups = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];
  jobs = [];
  for (_j = 0, _len = groups.length; _j < _len; _j++) {
    group = groups[_j];
    if (_.isArray(group) && group.length >= 2) {
      type = group[0];
      entities = group.slice(1);
      entities.forEach(function(ent) {
        var action, data;

        action = {
          type: type
        };
        switch (action) {
          case 'update':
            data = ent.getSaveData();
            if (_.isEmpty(data)) {
              action.options = {
                where: {
                  id: ent.id
                },
                data: data
              };
            }
            break;
          case 'delete':
            if (_.isArray(ent)) {
              action.options.where = " id in (" + ((ent.map(function(e) {
                return e.id;
              })).toString()) + ") ";
            } else {
              action.options.where = {
                id: ent.id
              };
            }
            break;
          case 'insert':
            action.options.data = ent;
            break;
          default:
            action.options = {};
        }
        return jobs.push(action);
      });
    }
  }
  return job.multJobs(jobs, cb);
};

Handler.prototype.dissolveCard = function(msg, session, next) {
  var cardIds, oldPill, player, playerId;

  playerId = session.get('playerId');
  cardIds = msg.cardIds;
  if (!_.isArray(cardIds) || !_.isNumber(cardIds)) {
    return next(null, {
      code: 501,
      msg: 'wrong parameter'
    });
  }
  if (_.isNumber(cardIds)) {
    cardIds = [cardIds];
  }
  player = null;
  oldPill = 0;
  return async.waterFall([
    function(cb) {
      return playerManager.getPlayerInfo({
        pid: playerId
      }, cb);
    }, function(res, cb) {
      var cards, pill;

      player = res;
      if (player.lv < 20) {
        return cb({
          code: 501,
          msg: '20级开启'
        });
      }
      cards = player.getCards(cardIds);
      if (cards.length === 0) {
        return cb({
          code: 501,
          msg: 'can not find card'
        });
      }
      if (!canDissoleve(cards)) {
        return cb({
          code: 501,
          msg: 'can not dissolve exp card or 6/7 star card'
        });
      }
      pill = doDissolveCard(cards);
      oldPill = player.pill;
      player.increase('pill', pill);
      return updateData(player, cards, cb);
    }
  ], function(err) {
    if (err) {
      return next(null, {
        code: err.code || 500,
        msg: err.msg || ''
      });
    }
    return next(null, {
      code: 200,
      msg: {
        pill: player.pill
      }
    });
  });
};

canDissoleve = function(cards) {
  return cards.filter(function(c) {
    var _ref;

    return c.tableId === 3000 || ((_ref = c.star) === 6 || _ref === 7);
  }).length === 0;
};

doDissolveCard = function(cards) {
  var card, grow_rate, pill, pill_map, rate_type, _i, _len;

  pill = 0;
  rate_type = configData.card.CARD_DISSOLVE_CRIT_TYPE;
  pill_map = configData.card.CARD_TO_PILL_MAP;
  for (_i = 0, _len = cards.length; _i < _len; _i++) {
    card = cards[_i];
    if (utility.hitRate(configData.card.CARD_DISSOLVE_CRIT_RATE)) {
      grow_rate = utility.randomValue(_.values(rate_type), _.keys(rate_type));
      pill += parseInt((pill_map[card.star] || 0) * (100 + grow_rate) / 100);
    }
  }
  return pill;
};

updateData = function(player, cards, cb) {
  var jobs, playerData;

  jobs = [];
  playerData = player.getSaveData();
  if (!_.isEmpty(playerData)) {
    jobs.push({
      type: 'update',
      options: {
        table: 'player',
        where: {
          id: player.id
        },
        data: playerData
      }
    });
  }
  if (_.isArray(cards) && cards.length > 0) {
    jobs.push({
      type: 'delete',
      options: {
        table: 'card',
        where: " id in (" + ((cards.map(function(c) {
          return c.id;
        })).toString()) + ") "
      }
    });
  }
  return job.multJobs(jobs, cb);
};

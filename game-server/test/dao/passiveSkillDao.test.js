// Generated by CoffeeScript 1.6.3
var app, dao, dbClient, should;

require('./setup');

app = require('pomelo').app;

dao = require('../../app/dao').init('mysql');

dbClient = app.get('dbClient');

should = require('should');

describe("Passive Skill Data Access Object", function() {
  var cardId, id, tableId, value;
  id = 1;
  cardId = 1;
  tableId = 1;
  value = '0';
  describe("#createPassiveSkill", function() {
    describe("when not exists", function() {
      after(function(done) {
        return dbClient["delete"]('delete from passiveSkill where id =?', [id], function() {
          return done();
        });
      });
      it("should can be create with right param", function(done) {
        return dao.passiveSkill.createPassiveSkill({
          id: id,
          cardId: cardId,
          tableId: tableId,
          value: value
        }, function(err, res) {
          should.strictEqual(null, err);
          res.id.should.be.equal(id);
          return done();
        });
      });
      return it("should can be create with the wrong param", function(done) {
        return dao.passiveSkill.createPassiveSkill({}, function(err, res) {
          should.strictEqual(null, res);
          err.code.should.be.equal(400);
          return done();
        });
      });
    });
    return describe("when exists", function() {
      before(function(done) {
        return dbClient.insert('insert into passiveSkill (id, cardId, tableId, value, createTime) value (?, ?, ?, ?, ?)', [id, cardId, tableId, value, Date.now()], function() {
          return done();
        });
      });
      after(function(done) {
        return dbClient["delete"]('delete from passiveSkill where id =?', [id], function() {
          return done();
        });
      });
      return it("should can be create with duplicate id", function(done) {
        return dao.passiveSkill.createPassiveSkill({
          id: id,
          cardId: cardId,
          tableId: tableId,
          value: value
        }, function(err, res) {
          should.strictEqual(null, res);
          err.should.eql({
            "code": "ER_DUP_ENTRY",
            "msg": "ER_DUP_ENTRY: Duplicate entry '1' for key 'PRIMARY'"
          });
          return done();
        });
      });
    });
  });
  describe("#deletePassiveSkill", function() {
    before(function(done) {
      return dbClient.insert('insert into passiveSkill (id, cardId, tableId, value, createTime) value (?, ?, ?, ?, ?)', [id, cardId, tableId, value, Date.now()], function() {
        return done();
      });
    });
    it("should can be delete a passive skill", function(done) {
      return dao.passiveSkill.deletePassiveSkillById(id, function(err, res) {
        should.strictEqual(null, err);
        res.should.be.ok;
        return done();
      });
    });
    return it("should can not delete a not exist passive skill", function(done) {
      return dao.passiveSkill.deletePassiveSkillById(id + 1000, function(err, res) {
        should.strictEqual(null, err);
        res.should.not.be.ok;
        return done();
      });
    });
  });
  describe("#getPassiveSkill", function() {
    before(function(done) {
      return dbClient.insert('insert into passiveSkill (id, cardId, tableId, value, createTime) value (?, ?, ?, ?, ?)', [id, cardId, tableId, value, Date.now()], function() {
        return done();
      });
    });
    after(function(done) {
      return dbClient["delete"]('delete from passiveSkill where id =?', [id], function() {
        return done();
      });
    });
    it("should can be get a passive skill with card id", function(done) {
      return dao.passiveSkill.getPassiveSkillByCardId(cardId, function(err, res) {
        var ps;
        should.strictEqual(null, err);
        res.length.should.be.equal(1);
        ps = res[0];
        ps.id.should.be.equal(id);
        ps.cardId.should.be.equal(cardId);
        ps.tableId.should.be.equal(tableId);
        return done();
      });
    });
    it("should can be get with id", function(done) {
      return dao.passiveSkill.getPassiveSkillById(id, function(err, res) {
        var ps;
        should.strictEqual(null, err);
        ps = res;
        ps.id.should.be.equal(id);
        ps.cardId.should.be.equal(cardId);
        ps.tableId.should.be.equal(tableId);
        return done();
      });
    });
    return it("should return error when not exists", function(done) {
      return dao.passiveSkill.getPassiveSkillById(id + 1000, function(err, res) {
        should.strictEqual(null, res);
        err.should.eql({
          code: null,
          msg: 'PassiveSkill not exists'
        });
        return done();
      });
    });
  });
  return describe("#updatePassiveSkill", function() {
    before(function(done) {
      return dbClient.insert('insert into passiveSkill (id, cardId, tableId, value, createTime) value (?, ?, ?, ?, ?)', [id, cardId, tableId, value, Date.now()], function() {
        return done();
      });
    });
    after(function(done) {
      return dbClient["delete"]('delete from passiveSkill where id =?', [id], function() {
        return done();
      });
    });
    it("should can be updated a passive skill attibutes", function(done) {
      return dao.passiveSkill.updatePassiveSkillById(id, {
        cardId: 2,
        tableId: 2,
        value: '2'
      }, function(err, res) {
        should.strictEqual(null, err);
        res.should.be.ok;
        return done();
      });
    });
    return it("should return false when passive skill not exists", function(done) {
      return dao.passiveSkill.updatePassiveSkillById(id + 1000, {
        cardId: 2,
        tableId: 2,
        value: 'value'
      }, function(err, res) {
        should.strictEqual(null, err);
        res.should.not.be.ok;
        return done();
      });
    });
  });
});

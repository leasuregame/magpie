// Generated by CoffeeScript 1.6.3
var app, dao, dbClient, should;

require('./setup');

app = require('pomelo').app;

dao = require('../../app/dao').init('mysql');

dbClient = app.get('dbClient');

should = require('should');

describe("Player Dao Access Object", function() {
  var areaId, name, pid, uid;
  uid = 1;
  pid = 1;
  areaId = 1;
  name = 'test_player_name';
  describe("#createPlayer", function() {
    describe("When player not exists", function() {
      after(function(done) {
        return dbClient["delete"]('delete from player where id = ?', [pid], function() {
          return done();
        });
      });
      it("should can create a player", function(done) {
        return dao.player.createPlayer({
          id: pid,
          userId: uid,
          areaId: areaId,
          name: name
        }, function(err, res) {
          should.strictEqual(null, err);
          res.id.should.be.equal(pid);
          res.name.should.be.equal(name);
          res.areaId.should.be.equal(areaId);
          return done();
        });
      });
      return it("should return error with param wrong", function(done) {
        return dao.player.createPlayer({}, function(err, res) {
          should.strictEqual(null, res);
          err.code.should.be.equal(400);
          return dao.player.createPlayer({
            userId: uid
          }, function(err, res) {
            should.strictEqual(null, res);
            err.code.should.be.equal(400);
            return done();
          });
        });
      });
    });
    return describe("when player exists", function() {
      before(function(done) {
        return dbClient.insert('insert into player (id, userId, areaId, name, createTime) values (?,?,?,?,?)', [pid, uid, areaId, name, Date.now()], function() {
          return done();
        });
      });
      after(function(done) {
        return dbClient["delete"]('delete from player where id = ?', [pid], function() {
          return done();
        });
      });
      return it("should can not create duplicate player", function(done) {
        return dao.player.createPlayer({
          id: pid,
          userId: uid,
          areaId: areaId,
          name: name
        }, function(err, res) {
          should.strictEqual(null, res);
          err.should.eql({
            code: 'ER_DUP_ENTRY',
            msg: 'ER_DUP_ENTRY: Duplicate entry \'1\' for key \'PRIMARY\''
          });
          return done();
        });
      });
    });
  });
  describe("#getPlayer", function() {
    before(function(done) {
      return dbClient.insert('insert into player (id, userId, areaId, name, createTime) values (?,?,?,?,?)', [pid, uid, areaId, name, Date.now()], function() {
        return done();
      });
    });
    after(function(done) {
      return dbClient["delete"]('delete from player where id = ?', [pid], function() {
        return done();
      });
    });
    describe("when player exists", function() {
      it("should can get the existed user with id", function(done) {
        return dao.player.getPlayerById(pid, function(err, res) {
          should.strictEqual(null, err);
          res.id.should.be.equal(pid);
          res.name.should.be.equal(name);
          return done();
        });
      });
      return it("should can get the existed user with name", function(done) {
        return dao.player.getPlayerByName(name, function(err, res) {
          should.strictEqual(null, err);
          res.id.should.be.equal(pid);
          res.name.should.be.equal(name);
          return done();
        });
      });
    });
    describe("when player not exists", function() {
      it("get user with id should return error", function(done) {
        var pid_not_exists;
        pid_not_exists = 100000;
        return dao.player.getPlayerById(pid_not_exists, function(err, res) {
          should.strictEqual(null, res);
          err.should.eql({
            code: null,
            msg: 'Player not exists'
          });
          return done();
        });
      });
      return it("get user with name should return error", function(done) {
        var name_not_exists;
        name_not_exists = 'not exists name';
        return dao.player.getPlayerByName(name_not_exists, function(err, res) {
          should.strictEqual(null, res);
          err.should.eql({
            code: null,
            msg: 'Player not exists'
          });
          return done();
        });
      });
    });
    return describe("get all player info", function() {
      return it("should can be got all the player infomation", function() {});
    });
  });
  describe("#deletePlayer", function() {
    before(function(done) {
      return dbClient.insert('insert into player (id, userId, areaId, name, createTime) values (?,?,?,?,?)', [pid, uid, areaId, name, Date.now()], function() {
        return done();
      });
    });
    after(function(done) {
      return dbClient["delete"]('delete from player where id = ?', [pid], function() {
        return done();
      });
    });
    it("when player exists, should can be delete a player", function(done) {
      return dao.player.deletePlayerById(pid, function(err, res) {
        should.strictEqual(err, null);
        res.should.be.ok;
        return done();
      });
    });
    return it("when player not exists, should return false", function(done) {
      return dao.player.deletePlayerById(pid + 10000, function(err, res) {
        should.strictEqual(err, null);
        res.should.not.be.ok;
        return done();
      });
    });
  });
  return describe("#updatePlayer", function() {
    var create_time;
    create_time = Date.now();
    before(function(done) {
      return dbClient.insert('insert into player (id, userId, areaId, name, createTime) values (?,?,?,?,?)', [pid, uid, areaId, name, create_time], function() {
        return done();
      });
    });
    after(function(done) {
      return dbClient["delete"]('delete from player where id = ?', [pid], function() {
        return done();
      });
    });
    describe("updatePlayerById", function() {
      return it("should can be update player with specific fields", function(done) {
        return dao.player.updatePlayerById(pid, {
          areaId: 5,
          name: 'new name',
          userId: 10,
          money: 1000
        }, function(err, res) {
          should.strictEqual(null, err);
          res.should.be.ok;
          return dbClient.query('select * from player where id = ?', [pid], function(err, res) {
            var player;
            res.length.should.be.equal(1);
            player = res[0];
            player.should.eql({
              id: 1,
              createTime: create_time,
              userId: 10,
              areaId: 5,
              name: 'new name',
              power: 0,
              lv: 0,
              exp: 0,
              money: 1000,
              gold: 0,
              lineUp: '',
              ability: 0,
              task: '',
              pass: 0,
              passMark: null
            });
            return done();
          });
        });
      });
    });
    return describe("updatePlayerByName", function() {
      return it("should can be update player with specific fields", function(done) {
        return dao.player.updatePlayerByName(name, {
          areaId: 5,
          name: 'new name',
          userId: 10,
          money: 1000
        }, function(err, res) {
          should.strictEqual(null, err);
          res.should.be.ok;
          return dbClient.query('select * from player where id = ?', [pid], function(err, res) {
            var player;
            res.length.should.be.equal(1);
            player = res[0];
            player.should.eql({
              id: 1,
              createTime: create_time,
              userId: 10,
              areaId: 5,
              name: 'new name',
              power: 0,
              lv: 0,
              exp: 0,
              money: 1000,
              gold: 0,
              lineUp: '',
              ability: 0,
              task: '',
              pass: 0,
              passMark: null
            });
            return done();
          });
        });
      });
    });
  });
});

// Generated by CoffeeScript 1.6.3
var app, dao, should;

require('./setup');

app = require('pomelo').app;

dao = app.get('dao');

should = require('should');

describe("User Data Access Object", function() {
  var account, from, password;
  account = 'testacount';
  password = 1;
  from = '';
  describe("#createUser", function() {
    after(function() {
      return app.get('dbClient')["delete"]('delete from user where account = ?', [account], function() {});
    });
    it("should can be create user when user not exists", function(done) {
      return dao.user.createUser({
        account: account,
        password: password
      }, function(err, res) {
        res.account.should.be.equal(account);
        should.strictEqual(err, null);
        return done();
      });
    });
    return it("should return error message when user exists", function(done) {
      return dao.user.createUser({
        account: account,
        password: password
      }, function(err, res) {
        should.strictEqual(res, null);
        err.should.eql({
          code: 'ER_DUP_ENTRY',
          msg: 'ER_DUP_ENTRY: Duplicate entry \'testacount\' for key \'INDEX_ACCOUNT\''
        });
        return done();
      });
    });
  });
  describe("#getUserBy...", function() {
    var id, name;
    id = 1;
    name = 'testname';
    describe("when user exists", function() {
      before(function(done) {
        return app.get('dbClient').insert('insert user (id, account, name, password, createTime) values (?,?,?,?,?)', [id, account, name, password, Date.now()], function() {
          return done();
        });
      });
      after(function(done) {
        return app.get('dbClient')["delete"]('delete from user where id = ?', [id], function() {
          return done();
        });
      });
      it("should can be got user by account", function(done) {
        return dao.user.getUserByAccount(account, function(err, res) {
          should.strictEqual(err, null);
          res.should.be.ok;
          return done();
        });
      });
      return it("should can be got user by Id", function(done) {
        return dao.user.getUserById(id, function(err, res) {
          should.strictEqual(err, null);
          res.should.be.ok;
          return done();
        });
      });
    });
    return describe("when user not exists", function() {
      it("should can not get user by id, and with error [User not exist]", function(done) {
        return dao.user.getUserById(id, function(err, res) {
          err.should.eql({
            code: null,
            msg: 'User not exists'
          });
          should.strictEqual(res, null);
          return done();
        });
      });
      return it("should can not get user by Account, and with error [User not exist]", function(done) {
        return dao.user.getUserByAccount(account, function(err, res) {
          err.should.eql({
            code: null,
            msg: 'User not exists'
          });
          should.strictEqual(res, null);
          return done();
        });
      });
    });
  });
  describe("#deleteUserBy...", function() {
    var id, name;
    id = 2;
    name = 'testname2';
    describe("when user exists", function() {
      beforeEach(function(done) {
        return app.get('dbClient').insert('insert user (id, account, name, password, createTime) values (?,?,?,?,?)', [id, account, name, password, Date.now()], function() {
          return done();
        });
      });
      afterEach(function(done) {
        return app.get('dbClient')["delete"]('delete from user where id = ?', [id], function() {
          return done();
        });
      });
      return it("should can be delete by Id", function(done) {
        return dao.user.deleteUserById(id, function(err, res) {
          should.strictEqual(err, null);
          res.should.be.ok;
          return done();
        });
      });
    });
    return describe("when user not exist", function() {
      return it("should return result 'false', deleteUserById", function(done) {
        return dao.user.deleteUserById(id, function(err, res) {
          should.strictEqual(err, null);
          res.should.not.be.ok;
          return done();
        });
      });
    });
  });
  return describe("#updateUser", function() {
    var id, name;
    id = 3;
    name = 'testname3';
    before(function(done) {
      return app.get('dbClient').insert('insert user (id, account, name, password, createTime) values (?,?,?,?,?)', [id, account, name, password, Date.now()], function() {
        return done();
      });
    });
    after(function(done) {
      return app.get('dbClient')["delete"]('delete from user where id = ?', [id], function() {
        return done();
      });
    });
    return it("should can be update user with specific fields", function(done) {
      return dao.user.updateUserById(id, {
        name: 'changename'
      }, function(err, res) {
        should.strictEqual(err, null);
        return dao.user.getUserById(id, function(err, res) {
          should.strictEqual(err, null);
          res.name.should.be.equal('changename');
          return done();
        });
      });
    });
  });
});

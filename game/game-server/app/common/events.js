// Generated by CoffeeScript 1.6.2
var Events, _,
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('underscore');

Events = {
  bind: function(ev, callback) {
    var calls, evs, name, objs, _i, _len;

    evs = ev.split(' ');
    calls = this.hasOwnProperty('_callbacks') && this._callbacks || (this._callbacks = {});
    objs = this.hasOwnProperty('_objects') && this._objects || (this._objects = {});
    for (_i = 0, _len = evs.length; _i < _len; _i++) {
      name = evs[_i];
      if (_.isFunction(callback)) {
        calls[name] || (calls[name] = []);
        calls[name].push(callback);
      }
      if (_.isObject(callback)) {
        objs[name] || (objs[name] = []);
        objs[name].push(callback);
      }
    }
    return this;
  },
  one: function(ev, callback) {
    var handler;

    return this.bind(ev, handler = function() {
      this.unbind(ev, handler);
      return callback.apply(this, arguments);
    });
  },
  trigger: function() {
    var args, callback, ev, list, obj, olist, _i, _j, _len, _len1, _ref, _ref1;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    ev = args.shift();
    list = this.hasOwnProperty('_callbacks') && ((_ref = this._callbacks) != null ? _ref[ev] : void 0);
    olist = this.hasOwnProperty('_objs') && ((_ref1 = this._objs) != null ? _ref1[ev] : void 0);
    if (!list && !olist) {
      return;
    }
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      callback = list[_i];
      if (callback.apply(this, args) === false) {
        break;
      }
    }
    for (_j = 0, _len1 = olist.length; _j < _len1; _j++) {
      obj = olist[_j];
      if (obj.check()) {
        obj.execute.apply(obj, args);
      }
    }
    return true;
  },
  listenTo: function(obj, ev, callback) {
    obj.bind(ev, callback);
    this.listeningTo || (this.listeningTo = []);
    this.listeningTo.push(obj);
    return this;
  },
  listenToOnce: function(obj, ev, callback) {
    var listeningToOnce;

    listeningToOnce = this.listeningToOnce || (this.listeningToOnce = []);
    listeningToOnce.push(obj);
    obj.one(ev, function() {
      var idx;

      idx = listeningToOnce.indexOf(obj);
      if (idx !== -1) {
        listeningToOnce.splice(idx, 1);
      }
      return callback.apply(this, arguments);
    });
    return this;
  },
  stopListening: function(obj, ev, callback) {
    var idx, listeningTo, retain, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _results;

    if (arguments.length === 0) {
      retain = [];
      _ref = [this.listeningTo, this.listeningToOnce];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listeningTo = _ref[_i];
        if (!listeningTo) {
          continue;
        }
        for (_j = 0, _len1 = listeningTo.length; _j < _len1; _j++) {
          obj = listeningTo[_j];
          if (!(!(__indexOf.call(retain, obj) >= 0))) {
            continue;
          }
          obj.unbind();
          retain.push(obj);
        }
      }
      this.listeningTo = void 0;
      return this.listeningToOnce = void 0;
    } else if (obj) {
      if (ev) {
        obj.unbind(ev, callback);
      }
      if (!ev) {
        obj.unbind();
      }
      _ref1 = [this.listeningTo, this.listeningToOnce];
      _results = [];
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        listeningTo = _ref1[_k];
        if (!listeningTo) {
          continue;
        }
        idx = listeningTo.indexOf(obj);
        if (idx !== -1) {
          _results.push(listeningTo.splice(idx, 1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  },
  unbind: function(ev, callback) {
    var cb, evs, i, list, name, obj, olist, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;

    if (arguments.length === 0) {
      this._callbacks = {};
      return this;
    }
    if (!ev) {
      return this;
    }
    evs = ev.split(' ');
    for (_i = 0, _len = evs.length; _i < _len; _i++) {
      name = evs[_i];
      list = (_ref = this._callbacks) != null ? _ref[name] : void 0;
      olist = (_ref1 = this._objects) != null ? _ref1[name] : void 0;
      if (!list && !olist) {
        continue;
      }
      if (!callback) {
        delete this._callbacks[name];
        delete this._objects[name];
        continue;
      }
      for (i = _j = 0, _len1 = list.length; _j < _len1; i = ++_j) {
        cb = list[i];
        if (!(cb === callback)) {
          continue;
        }
        list = list.slice();
        list.splice(i, 1);
        this._callbacks[name] = list;
        break;
      }
      for (i = _k = 0, _len2 = olist.length; _k < _len2; i = ++_k) {
        obj = olist[i];
        if (!(cb === callback)) {
          continue;
        }
        olist = list.slice();
        olist.splice(i, 1);
        this._objects[name] = olist;
        break;
      }
    }
    return this;
  }
};

Events.on = Events.bind;

Events.off = Events.unbind;

module.exports = Events;

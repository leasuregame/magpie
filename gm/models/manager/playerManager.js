// Generated by CoffeeScript 1.6.3
var Cache, Manager, addRankInfo, app, dao,area, async, _;

var app = require('../../application').app;

console.log(app);

dao = app.get('dao');


Cache = require('../common/cache');

async = require('async');

area = require('../domain/area/area');

_ = require('underscore');

Manager = (function() {
  function Manager() {

  }

  Manager.initDao = function(d) {
   // dao = d;
  };

  Manager.createPlayer = function(uid, name, params, cb) {
    return dao.player.create({
      data: {
        userId: uid,
        name: name,
        areaId: areaId
      }
    }, function(err, player) {
      if (err !== null) {
        cb(err, null);
        return;
      }
      return cb(null, player);
    });
  };

  Manager.getPlayerInfo = function(params, cb) {
    var sync, _player;
   /* if (!app.get('debug')) {
      _player = area.getPlayer(params.pid);
      console.log('-get player form area cache-', _player != null ? _player.id : void 0, _player != null ? _player.name : void 0);
      if (_player != null) {
        return cb(null, _player);
      }
    }
    sync = (params.sync != null) && params.sync || true;
    */
     console.log(dao);
    return dao.player.getPlayerInfo({
      where: {
          name : params.name,
          areaId: params.areaId
      },
      sync: sync
    }, function(err, player) {
      if (err !== null) {
        cb(err, null);
        return;
      }
      return cb(null, player);
    });
  };

  Manager.getPlayers = function(ids, cb) {
    return dao.player.getPlayerDetails(ids, function(err, res) {
      var results;
      if (err !== null) {
        return cb(err, null);
      }
      results = {};
      res.map(function(r) {
        return results[r.id] = r;
      });
      return cb(null, results);
    });
  };

  Manager.rankingList = function(rankings, cb) {
    return async.waterfall([
      function(callback) {
        return dao.rank.fetchMany({
          where: " ranking in (" + (rankings.toString()) + ") "
        }, callback);
      }, function(ranks, callback) {
        var _ids;
        _ids = ranks.map(function(r) {
          return r.playerId;
        });
        return dao.player.getPlayerDetails(_ids, function(err, results) {
          return callback(err, results, ranks);
        });
      }
    ], function(err, players, ranks) {
      if (err !== null) {
        return cb(err, null);
      }
      addRankInfo(players, ranks);
      return cb(null, players);
    });
  };

  return Manager;

})();

addRankInfo = function(players, ranks) {
  var p, r, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = players.length; _i < _len; _i++) {
    p = players[_i];
    r = _.findWhere(ranks, {
      playerId: p.id
    });
    if (r != null) {
      _results.push(p.set('rank', r));
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

module.exports = Manager;

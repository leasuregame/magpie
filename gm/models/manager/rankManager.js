// Generated by CoffeeScript 1.6.3
var Manager, app, dao, job, _;
var express = require('express');
app = express();

dao = app.get('dao');

job = require('../dao/job');

_ = require('underscore');

Manager = module.exports = {
  getRank: function(playerId, cb) {
    return dao.rank.fetchOne({
      sync: true,
      where: {
        playerId: playerId
      }
    }, cb);
  },
  exchangeRankings: function(player, targetId, rankData, isWin, cb) {
    return dao.rank.fetchMany({
      where: " playerId in (" + ([player.id, targetId].toString()) + ") "
    }, function(err, ranks) {
      var challenger, defender, jobs, playerRanking, targetRanking, _ref, _ref1;
      if (err) {
        return cb(err);
      }
      if (!!ranks && ranks.length !== 2) {
        return cb({
          code: 501,
          msg: 'can not get all rank records'
        });
      }
      challenger = (_ref = ranks.filter(function(r) {
        return r.playerId === player.id;
      })) != null ? _ref[0] : void 0;
      defender = (_ref1 = ranks.filter(function(r) {
        return r.playerId === targetId;
      })) != null ? _ref1[0] : void 0;
      playerRanking = challenger.ranking;
      targetRanking = defender.ranking;
      if (isWin) {
        if (playerRanking < targetRanking) {
          defender.set('ranking', playerRanking);
          challenger.set('ranking', targetRanking);
        }
        challenger.incCount('win');
        challenger.incCount('winningStreak');
        defender.resetCount('winningStreak');
        defender.incCount('lose');
        player.increase('elixir', rankData.win_elixir);
      } else {
        challenger.incCount('lose');
        defender.incCount('win');
        defender.incCount('winningStreak');
        challenger.resetCount('winningStreak');
        player.increase('elixir', rankData.lose_elixir);
      }
      challenger.incCount('challenge');
      defender.incCount('challenge');
      challenger.pushRecent(targetId);
      defender.pushRecent(player.id);
      player.rank = challenger;
      jobs = [
        {
          type: 'update',
          options: {
            table: 'player',
            where: {
              id: player.id
            },
            data: player.getSaveData()
          }
        }, {
          type: 'update',
          options: {
            table: 'rank',
            where: {
              playerId: player.id
            },
            data: challenger.getSaveData()
          }
        }, {
          type: 'update',
          options: {
            table: 'rank',
            where: {
              playerId: targetId
            },
            data: defender.getSaveData()
          }
        }
      ];
      return job.multJobs(jobs, cb);
    });
  }
};

// Generated by CoffeeScript 1.6.2
var Attack, Base, Battle, Round, battleLog, exports,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

battleLog = require('./battle_log');

Base = (function() {
  function Base(attacker, defender) {
    this.attacker = attacker;
    this.defender = defender;
    this.isStop = false;
    if (typeof this.init === "function") {
      this.init.apply(this, arguments);
    }
  }

  Base.prototype.isOver = function() {
    return this.attacker.death() || this.defender.death();
  };

  Base.prototype.process = function() {
    this.start();
    !this.isStop && this.execute();
    return this.end();
  };

  Base.prototype.start = function() {};

  Base.prototype.execute = function() {};

  Base.prototype.end = function() {};

  return Base;

})();

Battle = (function(_super) {
  __extends(Battle, _super);

  function Battle() {
    Battle.__super__.constructor.apply(this, arguments);
  }

  Battle.prototype.init = function() {
    this.attacker.setEnemy(this.defender, true);
    this.defender.setEnemy(this.attacker);
    return this.round = new Round(this.attacker, this.defender);
  };

  Battle.prototype.start = function() {
    var _enm;

    _enm = {
      id: this.defender.id,
      name: this.defender.name,
      lv: this.defender.lv,
      cards: this.defender.cards()
    };
    battleLog.set('enemy', _enm);
    return battleLog.set('me', {
      cards: this.attacker.cards()
    });
  };

  Battle.prototype.execute = function() {
    var _results;

    _results = [];
    while (!this.isOver()) {
      this.round.process();
      _results.push(this.round.increase_round_num());
    }
    return _results;
  };

  Battle.prototype.end = function() {
    if (this.defender.death()) {
      battleLog.setWinner('own');
    }
    if (this.attacker.death()) {
      return battleLog.setWinner('enemy');
    }
  };

  return Battle;

})(Base);

Round = (function(_super) {
  __extends(Round, _super);

  function Round() {
    Round.__super__.constructor.apply(this, arguments);
  }

  Round.prototype.init = function() {
    this.round_num = 1;
    return this.attack = new Attack(this.attacker, this.defender);
  };

  Round.prototype.increase_round_num = function() {
    return this.round_num++;
  };

  Round.prototype.reset_round_num = function() {
    return this.round_num = 1;
  };

  Round.prototype.setShootCount = function() {
    this.attacker.shootCount = this.attacker.aliveHeros().length;
    return this.defender.shootCount = this.defender.aliveHeros().length;
  };

  Round.prototype.isOver = function() {
    return (this.attacker.shootCount <= 0 && this.defender.shootCount <= 0) || this.attacker.death() || this.defender.death();
  };

  Round.prototype.start = function() {
    this.setShootCount();
    return console.log('round: ', this.round_num);
  };

  Round.prototype.execute = function() {
    var _results;

    _results = [];
    while (!this.isOver()) {
      this.attacker.round_num = this.defender.round_num = this.round_num;
      _results.push(this.attack.process());
    }
    return _results;
  };

  Round.prototype.end = function() {
    this.setShootCount();
    this.attacker.reset();
    return this.defender.reset();
  };

  return Round;

})(Base);

Attack = (function(_super) {
  __extends(Attack, _super);

  function Attack() {
    Attack.__super__.constructor.apply(this, arguments);
  }

  Attack.prototype.execute = function() {
    var _attack;

    _attack = function(atker, dfder) {
      atker.attack(function(hero) {});
      return atker.nextHero();
    };
    if (this.attacker.shootCount > 0) {
      this.attacker.shootCount -= 1;
      _attack(this.attacker, this.defender);
    }
    if (this.defender.shootCount > 0) {
      this.defender.shootCount -= 1;
      return _attack(this.defender, this.attacker);
    }
  };

  return Attack;

})(Base);

exports = module.exports = Battle;

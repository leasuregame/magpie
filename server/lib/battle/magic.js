// Generated by CoffeeScript 1.6.2
var Magic, PropertyBase, exports, utility, _ref, _ref1, _ref10, _ref11, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PropertyBase = require('./base_property');

utility = require('../common/utility');

Magic = exports = module.exports;

Magic.atk_improve = (function(_super) {
  __extends(atk_improve, _super);

  function atk_improve() {
    _ref = atk_improve.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  atk_improve.prototype.enable = function(targets, skill) {
    var _this = this;

    return targets.forEach(function(tag) {
      return tag.bind('before_attack', _this);
    });
  };

  atk_improve.prototype.disable = function() {
    var _this = this;

    return this.targets.forEach(function(tag) {
      return tag.unbind('before_attack', _this);
    });
  };

  atk_improve.prototype.execute = function(tag) {
    return tag.atk += this.changeValue(tag.atk);
  };

  return atk_improve;

})(PropertyBase);

Magic.atk_reduce = (function(_super) {
  __extends(atk_reduce, _super);

  function atk_reduce() {
    _ref1 = atk_reduce.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  atk_reduce.prototype.enable = function(targets, skill) {
    var _this = this;

    return targets.forEach(function(tag) {
      return tag.bind('before_attack', _this);
    });
  };

  atk_reduce.prototype.disable = function() {
    var _this = this;

    return this.targets.forEach(function(tag) {
      return tag.unbind('before_attack', _this);
    });
  };

  atk_reduce.prototype.execute = function(tag) {
    return tag.atk -= this.changeValue(tag.atk);
  };

  return atk_reduce;

})(PropertyBase);

Magic.hp_improve = (function(_super) {
  __extends(hp_improve, _super);

  function hp_improve() {
    _ref2 = hp_improve.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  hp_improve.prototype.enable = function(targets, skill) {};

  return hp_improve;

})(PropertyBase);

/*
passive skill, not 'enable' and 'disable' function
*/


Magic.dodge_ignore = (function(_super) {
  __extends(dodge_ignore, _super);

  function dodge_ignore() {
    _ref3 = dodge_ignore.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  dodge_ignore.prototype.execute = function(tag) {
    return tag.cant_miss = true;
  };

  return dodge_ignore;

})(PropertyBase);

Magic.crit_ignore = (function(_super) {
  __extends(crit_ignore, _super);

  function crit_ignore() {
    _ref4 = crit_ignore.__super__.constructor.apply(this, arguments);
    return _ref4;
  }

  crit_ignore.prototype.execute = function(tag) {
    return tag.cant_be_crit = true;
  };

  return crit_ignore;

})(PropertyBase);

Magic.crit_improve_damage = (function(_super) {
  __extends(crit_improve_damage, _super);

  function crit_improve_damage() {
    _ref5 = crit_improve_damage.__super__.constructor.apply(this, arguments);
    return _ref5;
  }

  crit_improve_damage.prototype.execute = function(tag) {
    return tag.crit_factor += this.changeValue(tag.crit_factor);
  };

  return crit_improve_damage;

})(PropertyBase);

Magic.damage_reduce = (function(_super) {
  __extends(damage_reduce, _super);

  function damage_reduce() {
    _ref6 = damage_reduce.__super__.constructor.apply(this, arguments);
    return _ref6;
  }

  damage_reduce.prototype.enable = function(targets, skill) {
    var _this = this;

    return targets.forEach(function(tag) {
      return tag.bind('before_damage', _this);
    });
  };

  damage_reduce.prototype.disable = function() {
    var _this = this;

    return this.targets.forEach(function(tag) {
      return tag.unbind('before_damage', _this);
    });
  };

  damage_reduce.prototype.execute = function(tag) {
    return tag.dmg -= this.changeValue(tag.dmg);
  };

  return damage_reduce;

})(PropertyBase);

Magic.hp_reduce = (function(_super) {
  __extends(hp_reduce, _super);

  function hp_reduce() {
    _ref7 = hp_reduce.__super__.constructor.apply(this, arguments);
    return _ref7;
  }

  return hp_reduce;

})(PropertyBase);

Magic.atk_lengthways = (function(_super) {
  __extends(atk_lengthways, _super);

  function atk_lengthways() {
    _ref8 = atk_lengthways.__super__.constructor.apply(this, arguments);
    return _ref8;
  }

  atk_lengthways.prototype.enable = function(targets, skill) {};

  atk_lengthways.prototype.execute = function(tag) {
    return tag.attack(this.targets);
  };

  return atk_lengthways;

})(PropertyBase);

Magic.atk_crossways_front = (function(_super) {
  __extends(atk_crossways_front, _super);

  function atk_crossways_front() {
    _ref9 = atk_crossways_front.__super__.constructor.apply(this, arguments);
    return _ref9;
  }

  return atk_crossways_front;

})(Magic.atk_lengthways);

Magic.atk_crossways_back = (function(_super) {
  __extends(atk_crossways_back, _super);

  function atk_crossways_back() {
    _ref10 = atk_crossways_back.__super__.constructor.apply(this, arguments);
    return _ref10;
  }

  return atk_crossways_back;

})(Magic.atk_lengthways);

Magic.atk_hp_max = (function(_super) {
  __extends(atk_hp_max, _super);

  function atk_hp_max() {
    _ref11 = atk_hp_max.__super__.constructor.apply(this, arguments);
    return _ref11;
  }

  atk_hp_max.prototype.enable = function(targets, skill) {
    var _this = this;

    return targets.forEach(function(tag) {
      return tag.bind('before_damage', _this);
    });
  };

  return atk_hp_max;

})(PropertyBase);

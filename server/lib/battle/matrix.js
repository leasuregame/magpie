// Generated by CoffeeScript 1.6.2
var ATTACKORDER, Matrix, exports, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('underscore');

/*
  Matrix formation:
  4, 5, 6
  1, 2, 3

  1, 2, 3
  4, 5, 6
*/


ATTACKORDER = {
  0: [0, 3, 1, 4, 2, 5],
  1: [1, 4, 0, 3, 2, 5],
  2: [2, 5, 1, 4, 0, 3],
  3: [0, 3, 1, 4, 2, 5],
  4: [1, 4, 0, 3, 2, 5],
  5: [2, 5, 1, 4, 0, 3]
};

Matrix = (function() {
  function Matrix(elements) {
    var defautEl, _ref;

    defautEl = [[null, null, null], [null, null, null]];
    this.elements = elements || defautEl;
    this.rows = this.elements.length;
    this.cols = (_ref = this.elements[0]) != null ? _ref.length : void 0;
    this.matrixOrder = ['00', '01', '02', '10', '11', '12'];
    this.curIndex = '00';
  }

  Matrix.prototype.numberToPosition = function(num) {
    if (num < 0 || num > this.matrixOrder.length - 1) {
      throw new Error("Index Error: the given number " + num + " out of Matrix index");
    }
    return this.matrixOrder[num];
  };

  Matrix.prototype.positionToNumber = function(pos) {
    if (__indexOf.call(this.matrixOrder, pos) < 0) {
      throw new Error("Invalid parameter, " + pos);
    }
    return this.matrixOrder.indexOf(pos);
  };

  Matrix.prototype.attackElement = function(scope, args) {
    var e, els;

    try {
      if (scope in this) {
        els = this[scope](args);
        if (!_.isArray(els)) {
          els = [els];
        }
        return _.filter(els, function(e) {
          return (e != null) && !(typeof e.death === "function" ? e.death() : void 0);
        });
      } else {
        return null;
      }
    } catch (_error) {
      e = _error;
      throw e;
    }
  };

  Matrix.prototype.scope = function(scope, args) {
    return this.attackElement(scope, args);
  };

  Matrix.prototype.getElement = function(pos) {
    var attackOrder, el, num, _i, _len, _pos;

    if (_.isString(pos) && pos.length === 2) {
      attackOrder = ATTACKORDER[this.positionToNumber(pos)];
    } else if (_.isNumber(pos) && pos < (this.rows * this.cols)) {
      attackOrder = ATTACKORDER[pos];
    } else if (pos === void 0) {
      attackOrder = ATTACKORDER[this.positionToNumber(this.curIndex)];
    } else {
      throw new Error("parameter 'pos' invalid, " + pos);
    }
    for (_i = 0, _len = attackOrder.length; _i < _len; _i++) {
      num = attackOrder[_i];
      _pos = this.numberToPosition(num);
      el = this.get(_pos);
      if ((el != null) && !(typeof el.death === "function" ? el.death() : void 0)) {
        return el;
      }
    }
    return null;
  };

  Matrix.prototype.current = function() {
    return this.curIndex && this.get(this.curIndex) || null;
  };

  Matrix.prototype.next = function() {
    var i, max_count, _hero, _i;

    max_count = this.matrixOrder.length;
    for (i = _i = 0; 0 <= max_count ? _i < max_count : _i > max_count; i = 0 <= max_count ? ++_i : --_i) {
      this.moveToNext();
      _hero = this.current();
      if (!_hero) {
        continue;
      }
      if (_.isObject(_hero) && !_hero.death()) {
        return _hero;
      } else {
        return _hero;
      }
    }
    return null;
  };

  Matrix.prototype.nextIndex = function(cindex) {
    var index, len;

    if (cindex == null) {
      cindex = this.curIndex;
    }
    len = this.matrixOrder.length;
    index = this.matrixOrder.indexOf(cindex) + 1;
    if (index === len) {
      return;
    }
    return this.matrixOrder[index];
  };

  Matrix.prototype.moveToNext = function() {
    this.curIndex = this.nextIndex();
    return this;
  };

  Matrix.prototype.reset = function() {
    var allElements, res;

    allElements = this.allWithNull();
    res = _.find(allElements, function(i) {
      return (i != null) && !(typeof i.death === "function" ? i.death() : void 0);
    });
    this.curIndex = res != null ? this.matrixOrder[allElements.indexOf(res)] : '00';
    return this;
  };

  Matrix.prototype.set = function(row, col, el) {
    var _ref, _ref1;

    if (arguments.length === 2) {
      el = col;
      if (_.isString(row) && row.length === 2) {
        _ref = row, row = _ref[0], col = _ref[1];
      } else if (_.isNumber(row)) {
        _ref1 = this.numberToPosition(row), row = _ref1[0], col = _ref1[1];
      }
    }
    if (_.isObject(el)) {
      el.pos = "" + row + col;
    }
    this.elements[row][col] = el;
    return this;
  };

  Matrix.prototype.unset = function(row, col) {
    var _ref;

    if (arguments.length === 1) {
      _ref = row, row = _ref[0], col = _ref[1];
    }
    this.set(row, col, null);
    return this;
  };

  Matrix.prototype.crosswaysFront = function() {
    return this.row(0);
  };

  Matrix.prototype.crosswaysBack = function() {
    return this.row(1);
  };

  Matrix.prototype.lengthways = function(colIndex) {
    var idx;

    if (_.isString(colIndex) && colIndex.length === 2) {
      idx = parseInt(colIndex[1]);
    } else {
      idx = parseInt(colIndex);
    }
    return this.col(idx);
  };

  Matrix.prototype.all = function() {
    return _.filter(this.allWithNull(), function(i) {
      return i != null;
    });
  };

  Matrix.prototype.allWithNull = function() {
    var row, _i, _len, _ref, _res;

    _res = [];
    _ref = this.elements;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      row = _ref[_i];
      _res = _res.concat(row);
    }
    return _res;
  };

  Matrix.prototype.hp_max = function() {
    var items, res;

    items = this.all();
    res = items[0];
    items.forEach(function(h) {
      return h.hp > res.hp && (res = h);
    });
    return res;
  };

  Matrix.prototype.hp_min = function() {
    var items, res;

    items = this.all();
    res = items[0];
    items.forEach(function(h) {
      return h.hp < res.hp && (res = h);
    });
    return res;
  };

  Matrix.prototype.atk_max = function() {
    var items, res;

    items = this.all();
    res = items[0];
    items.forEach(function(h) {
      return h.atk > res.atk && (res = h);
    });
    return res;
  };

  Matrix.prototype.atk_min = function() {
    var items, res;

    items = this.all();
    res = items[0];
    items.forEach(function(h) {
      return h.atk < res.atk && (res = h);
    });
    return res;
  };

  Matrix.prototype["default"] = function(pos) {
    return this.getElement(pos);
  };

  Matrix.prototype.random = function(num) {
    var i, indexs, len, rd_index, _i, _len, _ref, _res;

    if (num == null) {
      num = 1;
    }
    len = this.rows * this.cols;
    if (num > len) {
      num = len;
    }
    indexs = _.range(len);
    _res = [];
    _ref = _.range(num);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      rd_index = Math.floor(Math.random() * len--);
      _res.push(this.get(this.numberToPosition(indexs[rd_index])));
      indexs = indexs.filter(function(i) {
        return indexs.indexOf(i) !== rd_index;
      });
    }
    return _res;
  };

  Matrix.prototype.get = function(row, col) {
    var _ref;

    if (arguments.length === 1) {
      _ref = row, row = _ref[0], col = _ref[1];
    }
    this._checkRowAndCol(row, col);
    return this.elements[row][col];
  };

  Matrix.prototype.row = function(rowIndex) {
    this._checkRowAndCol(rowIndex, 0);
    return this.elements[rowIndex];
  };

  Matrix.prototype.col = function(colIndex) {
    var item, _i, _len, _ref, _results;

    this._checkRowAndCol(0, colIndex);
    _ref = this.elements;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      _results.push(item[colIndex]);
    }
    return _results;
  };

  Matrix.prototype._checkRowAndCol = function(row, col) {
    row = parseInt(row);
    col = parseInt(col);
    if (!(typeof row === 'number') && !(typeof col === 'number')) {
      throw new Error('Prameter row and col must be type of Number.');
    }
    if (row >= this.rows && col >= this.cols) {
      throw new Error('Prameter row and col must be less than rows and cols.');
    }
  };

  return Matrix;

})();

exports = module.exports = Matrix;

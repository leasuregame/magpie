// Generated by CoffeeScript 1.6.2
var Entity, Player, _, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Entity = require('./entity');

_ = require('underscore');

Player = (function(_super) {
  __extends(Player, _super);

  function Player() {
    _ref = Player.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Player.prototype.consumePower = function(val) {
    var _power;

    _power = this.get('power') - val;
    return this.set('power', _.max([_power, 0]));
  };

  Player.prototype.increasePower = function(val) {
    var _power;

    _power = this.get('power') + val;
    return this.set('power', _.min([_power, this.get('max_power')]));
  };

  Player.prototype.fullPower = function() {
    return this.set('power', this.get('max_power'));
  };

  Player.prototype.liveUp = function() {
    return this.increase('lv', 1);
  };

  Player.prototype.addCards = function(cards) {
    var c, _i, _len, _results;

    if (!cards || cards.length < 1) {
      return;
    }
    _results = [];
    for (_i = 0, _len = cards.length; _i < _len; _i++) {
      c = cards[_i];
      _results.push(this.addCard(c));
    }
    return _results;
  };

  Player.prototype.addCard = function(card) {
    var _ref1;

    return (_ref1 = this.get('cards')) != null ? _ref1[card.id] = card : void 0;
  };

  Player.prototype.updateCard = function(cardId, data) {
    var _ref1;

    return _.extend((_ref1 = this.get('cards')) != null ? _ref1[cardId] : void 0, data);
  };

  Player.prototype.removeCard = function(cardId) {
    var _ref1;

    if (((_ref1 = this.get('cards')) != null ? _ref1[cardId] : void 0) != null) {
      return delete this.get('cards')[cardId];
    }
  };

  return Player;

})(Entity);

module.exports = Player;

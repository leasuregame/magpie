// Generated by CoffeeScript 1.6.2
var ModelBase, Player, driver, exports, generateManager, uuid, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Player = require('../domain/player');

driver = require('./driver/ttDriver');

uuid = require('node-uuid');

_ = require('underscore');

ModelBase = (function() {
  function ModelBase() {}

  _.extend(ModelBase, driver);

  ModelBase.create = function(data, cb) {
    var id,
      _this = this;

    if (data.id != null) {
      id = data.id;
    } else {
      id = uuid.v1();
      data.id = id;
    }
    return (function(id, data, cb) {
      var _cb;

      _cb = function(err, item) {
        if (!err && item) {
          if (cb != null) {
            return cb(err, new _this.Entity({
              attributes: data
            }));
          }
        } else {
          if (cb != null) {
            return cb(err, item);
          }
        }
      };
      return _this.add(id, data, _cb);
    })(id, data, cb);
  };

  ModelBase.remove = function(id, cb) {
    return this.del(id, cb);
  };

  ModelBase.update = function(id, data, cb) {
    var _this = this;

    return this.fetch(id, function(err, res) {
      if (err) {
        throw new Error('can not find data with id: ' + id);
      }
      res.set(data);
      return _this.set(id, res, function(err, item) {
        if (err) {
          console.log(err);
        }
        return cb(err, item);
      });
    });
  };

  ModelBase.fetch = function(id, cb) {
    var _this = this;

    return (function(id, cb) {
      return _this.getJson(id, function(err, item) {
        if (err) {
          console.log(err);
          cb(err, item);
          return;
        }
        return cb(err, new _this.Entity({
          attributes: item
        }));
      });
    })(id, cb);
  };

  ModelBase.fetchMany = function(ids, cb) {
    var _this = this;

    return this.gets(ids, function(err, items) {
      var data, k, _res;

      if (err) {
        console.log(err);
        cb(err, item);
        return;
      }
      _res = {};
      for (k in items) {
        data = items[k];
        if (_.isString(data)) {
          data = JSON.parse(data);
        }
        _res[k] = new _this.Entity({
          attributes: data
        });
      }
      return cb(err, _res);
    });
  };

  return ModelBase;

})();

generateManager = function(entity) {
  var Ent, _ref;

  Ent = (function(_super) {
    __extends(Ent, _super);

    function Ent() {
      _ref = Ent.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Ent.Entity = entity;

    return Ent;

  })(ModelBase);
  return Ent;
};

exports = module.exports = {
  player: generateManager(Player)
};

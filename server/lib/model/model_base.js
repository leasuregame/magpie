// Generated by CoffeeScript 1.6.2
var ModelBase, Module, db, exports, uuid, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

db = require('./base');

Module = require('../common/module');

uuid = require('node-uuid');

_ = require('underscore');

ModelBase = (function(_super) {
  __extends(ModelBase, _super);

  ModelBase.extend(db);

  ModelBase.attributes = [];

  ModelBase.configure = function() {
    var attributes, name;

    name = arguments[0], attributes = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.className = name;
    if (attributes.length) {
      this.attributes = attributes;
    }
    this.attributes && (this.attributes = _.toArray(this.attributes));
    this.attributes || (this.attributes = []);
    return this;
  };

  /*
  static methods
  */


  ModelBase.create = function(data, cb) {
    var id,
      _this = this;

    if (data.id != null) {
      id = data.id;
    } else {
      id = uuid.v1();
      data.id = id;
    }
    return (function(id, data, cb) {
      var _cb;

      _cb = function(err, item) {
        if (!err && item) {
          if (cb != null) {
            return cb(err, new _this(id, data));
          }
        } else {
          if (cb != null) {
            return cb(err, item);
          }
        }
      };
      return _this.add(id, data, _cb);
    })(id, data, cb);
  };

  ModelBase.remove = function(id, cb) {
    return this.del(id, cb);
  };

  ModelBase.update = function(id, data, cb) {
    var _this = this;

    return this.fetch(id, function(err, res) {
      if (err) {
        throw new Error('can not find data with id: ' + id);
      }
      res.attr(data);
      return _this.set(id, res, function(err, item) {
        if (err) {
          console.log(err);
        }
        return cb(err, item);
      });
    });
  };

  ModelBase.fetch = function(id, cb) {
    var _this = this;

    return (function(id, cb) {
      return _this.getJson(id, function(err, item) {
        if (err) {
          console.log(err);
          cb(err, item);
          return;
        }
        return cb(err, new _this(id, item));
      });
    })(id, cb);
  };

  ModelBase.fetchMany = function(ids, cb) {
    var _this = this;

    return this.gets(ids, function(err, items) {
      var data, k, _res;

      if (err) {
        console.log(err);
        cb(err, item);
        return;
      }
      _res = {};
      for (k in items) {
        data = items[k];
        if (_.isString(data)) {
          data = JSON.parse(data);
        }
        _res[k] = new _this(k, data);
      }
      return cb(err, _res);
    });
  };

  /*
  Instance
  */


  function ModelBase(id, atts) {
    this.id = id;
    if (atts) {
      this.attr(atts);
    }
  }

  ModelBase.prototype.create = function(data, cb) {
    var _this = this;

    this.id = uuid.v1();
    this.add(this.id, data, function(err, item) {
      if (err && !item) {
        console.log(err);
      }
      _this.attr(data);
      return cb(err, item);
    });
    return this;
  };

  ModelBase.prototype.update = function(data, cb) {
    var _this = this;

    this.set(this.id, data, function(err, item) {
      if ((err != null) && item) {
        _this.attr(data);
        return cb(err, _this);
      }
    });
    return this;
  };

  ModelBase.prototype.remove = function(cb) {
    return this.del(this.id, cb);
  };

  ModelBase.prototype.fetch = function(cb) {
    var _this = this;

    this.getJson(this.id, function(err, item) {
      if ((err != null) && item) {
        cb(err, item);
      }
      _this.attr(item);
      return cb(err, _this);
    });
    return this;
  };

  ModelBase.prototype.attr = function(name, value) {
    var attrs, k, v;

    if (arguments.length === 2) {
      this[name] = value;
      return this;
    }
    if (arguments.length === 1) {
      if (_.isObject(name)) {
        attrs = name;
        if (attrs.id) {
          this.id = attrs.id;
        }
        for (k in attrs) {
          v = attrs[k];
          if (attrs.hasOwnProperty(k) && typeof this[k] === 'function') {
            this[k](v);
          } else {
            this[k] = v;
          }
        }
        return this;
      } else {
        return this[name];
      }
    }
  };

  return ModelBase;

})(Module);

exports = module.exports = ModelBase;

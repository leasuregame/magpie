// Generated by CoffeeScript 1.6.2
var Matrix, should, _;

Matrix = require('../battle/matrix');

should = require('should');

_ = require('underscore');

describe('A Matrix, for holding player cards with heros', function() {
  beforeEach(function() {
    return this.matrix = new Matrix([[1, 2, 3], [4, 5, 6]]);
  });
  it('default elements of a Matrix', function() {
    var expect, matrix;

    matrix = new Matrix();
    expect = [[null, null, null], [null, null, null]];
    matrix.elements.should.eql(expect);
    matrix.rows.should.equal(2);
    matrix.cols.should.equal(3);
    matrix.matrixOrder.should.eql(['00', '01', '02', '10', '11', '12']);
    return matrix.curIndex.should.equal('00');
  });
  it('current element', function() {
    return this.matrix.current().should.equal(1);
  });
  it('next element', function() {
    return this.matrix.next().should.equal(2);
  });
  it('get next element index', function() {
    return this.matrix.nextIndex().should.equal('01');
  });
  it('move index to next', function() {
    this.matrix.moveToNext();
    return this.matrix.curIndex.should.equal('01');
  });
  it('get element by [row, col]', function() {
    return this.matrix.get(1, 1).should.equal(5);
  });
  it("get element by string position ['str_pos']", function() {
    return this.matrix.get('11').should.equal(5);
  });
  it('set element by position [row, col, element]', function() {
    return this.matrix.set(1, 1, 10).get(1, 1).should.equal(10);
  });
  it('set element by string position [str_pos, element]', function() {
    return this.matrix.set('11', 20).get('11').should.equal(20);
  });
  it('unset element by position', function() {
    return should.strictEqual(this.matrix.unset(1, 1).get(1, 1), null);
  });
  it('unset element by string position [str_pos, element]', function() {
    return should.strictEqual(this.matrix.unset('11').get('11'), null);
  });
  it('get elements of a row by row index', function() {
    var _this = this;

    return [1, 2, 3].forEach(function(i) {
      return _this.matrix.row(0).should.include(i);
    });
  });
  it('get elements of a column by column index', function() {
    var _this = this;

    return [1, 4].forEach(function(i) {
      return _this.matrix.col(0).should.include(i);
    });
  });
  it('number to position', function() {
    this.matrix.numberToPosition(1).should.equal('01');
    this.matrix.numberToPosition(3).should.equal('10');
    return this.matrix.numberToPosition(5).should.equal('12');
  });
  it('position to number', function() {
    this.matrix.positionToNumber('00').should.equal(0);
    this.matrix.positionToNumber('02').should.equal(2);
    return this.matrix.positionToNumber('12').should.equal(5);
  });
  it('get element by position', function() {
    this.matrix.getElement('00').should.equal(1);
    this.matrix.unset('00').getElement('00').should.equal(4);
    this.matrix.unset('10').getElement('00').should.equal(2);
    this.matrix.unset('01').getElement('00').should.equal(5);
    this.matrix.unset('11').getElement('00').should.equal(3);
    this.matrix.unset('02').getElement('00').should.equal(6);
    this.matrix.unset('12');
    return should.strictEqual(this.matrix.get('00'), null);
  });
  it('.next(), return next not null element and set current index to the return element', function() {
    this.matrix.next().should.be.equal(2);
    this.matrix.current().should.be.equal(2);
    this.matrix.next().should.be.equal(3);
    this.matrix.next().should.be.equal(4);
    this.matrix.next().should.be.equal(5);
    this.matrix.next().should.be.equal(6);
    return this.matrix.current().should.be.equal(6);
  });
  it('.reset() current index to the element that not null and not death', function() {
    this.matrix.current().should.be.equal(1);
    this.matrix.moveToNext().moveToNext();
    this.matrix.current().should.be.equal(3);
    this.matrix.reset();
    this.matrix.current().should.be.equal(1);
    this.matrix.moveToNext().moveToNext();
    this.matrix.current().should.be.equal(3);
    this.matrix.unset('00');
    this.matrix.reset();
    return this.matrix.current().should.be.equal(2);
  });
  it('get crosswaysFront elements', function() {
    return this.matrix.crosswaysFront().should.eql([1, 2, 3]);
  });
  it('get crosswaysBack elements', function() {
    return this.matrix.crosswaysBack().should.eql([4, 5, 6]);
  });
  it('get lenthways elements', function() {
    return this.matrix.lengthways(0).should.eql([1, 4]);
  });
  it('get all elements', function() {
    return this.matrix.all().should.eql([1, 2, 3, 4, 5, 6]);
  });
  it('get hp_max, hp_min, atk_max, atk_min element', function() {
    this.matrix = new Matrix([
      [
        {
          id: 1,
          hp: 1,
          atk: 1
        }, {
          id: 2,
          hp: 2,
          atk: 2
        }, {
          id: 3,
          hp: 3,
          atk: 3
        }
      ], [
        {
          id: 4,
          hp: 4,
          atk: 4
        }, {
          id: 5,
          hp: 5,
          atk: 5
        }, {
          id: 6,
          hp: 6,
          atk: 6
        }
      ]
    ]);
    this.matrix.hp_max().should.eql({
      id: 6,
      hp: 6,
      atk: 6
    });
    this.matrix.hp_min().should.eql({
      id: 1,
      hp: 1,
      atk: 1
    });
    this.matrix.atk_max().should.eql({
      id: 6,
      hp: 6,
      atk: 6
    });
    return this.matrix.atk_min().should.eql({
      id: 1,
      hp: 1,
      atk: 1
    });
  });
  it('get default element by specific position', function() {
    this.matrix["default"](1).should.equal(2);
    this.matrix["default"]('02').should.equal(3);
    this.matrix["default"]().should.equal(1);
    this.matrix["default"](3).should.equal(1);
    this.matrix["default"](4).should.equal(2);
    this.matrix["default"](5).should.equal(3);
    this.matrix.unset('00');
    return this.matrix["default"](0).should.equal(4);
  });
  it('get random element', function() {
    var check,
      _this = this;

    check = function(num) {
      var i, res, _i, _len, _res;

      res = _this.matrix.random(num);
      res.length.should.equal(num);
      for (_i = 0, _len = res.length; _i < _len; _i++) {
        i = res[_i];
        i.should.within(1, 6);
      }
      _res = _.uniq(res);
      return _res.length.should.equal(res.length);
    };
    check(1);
    check(2);
    check(3);
    check(4);
    check(5);
    return check(6);
  });
  return it('.getElement(), ', function() {});
});

// Generated by CoffeeScript 1.6.2
var Hero, Matrix, Player, PlayerManager, TABLE_DIR, player_data, should, tab;

PlayerManager = require('../manager/manager').player;

Player = require('../battle/player');

Hero = require('../battle/hero');

Matrix = require('../battle/matrix');

should = require('should');

tab = require('../manager/table');

player_data = require('./prepare/player.data');

TABLE_DIR = (require('./prepare/path')).TABLE_DIR;

describe('Player', function() {
  before(function() {
    tab.reloadTables(TABLE_DIR + 'skills.xml', TABLE_DIR + 'cards.xml');
    return player_data.laodTestData();
  });
  after(function() {
    return player_data.clearTestData();
  });
  it('Initial, should be liked a Player', function() {
    var player;

    player = new Player();
    player.id.should.equal(0);
    player.lv.should.equal(0);
    player.exp.should.equal(0);
    player.power.should.equal(0);
    player.money.should.equal(0);
    player.lineUp.should.equal('');
    player.hero_ids.should.be.empty;
    return player.heros.should.be.empty;
  });
  it(".death(), should be death when all heros' hp <= 0", function() {
    return PlayerManager.fetch(player_data.player_id1, function(err, model) {
      var ply;

      console.log(err, model);
      ply = new Player(model);
      ply.death().should.be["false"];
      ply.heros.forEach(function(h) {
        return h.hp = 0;
      });
      return ply.death().should.be["true"];
    });
  });
  it(".currentHero()", function() {
    return PlayerManager.fetch(player_data.player_id1, function(err, model) {
      var ply;

      ply = new Player(model);
      ply.setLineUp('00:1');
      return ply.currentHero().should.be.an.instanceOf(Hero);
    });
  });
  it(".aliveHeros()", function() {
    return PlayerManager.fetch(player_data.player_id1, function(err, model) {
      var ply;

      ply = new Player(model);
      ply.aliveHeros().should.be.an["instanceof"](Array);
      return ply.aliveHeros().length.should.equal(6);
    });
  });
  it(".setLineUp()", function() {
    return PlayerManager.fetch(player_data.player_id1, function(err, model) {
      var ply;

      ply = new Player(model);
      ply.lineUp.should.equal('');
      ply.setLineUp('00:6');
      return ply.lineUp.should.be.equal('00:6');
    });
  });
  it(".parseLineUp()", function() {
    return PlayerManager.fetch(player_data.player_id1, function(err, model) {
      var ply, res;

      ply = new Player(model);
      ply.setLineUp('00:1,01:2');
      res = ply.parseLineUp();
      res.should.be.an["instanceof"](Array);
      res.should.eql([['00', '1'], ['01', '2']]);
      ply.setLineUp('00:1');
      return ply.parseLineUp().should.eql([['00', '1']]);
    });
  });
  return it(".bindCards()", function() {
    return PlayerManager.fetch(player_data.player_id1, function(err, model) {
      var ply;

      ply = new Player(model);
      ply.setLineUp('00:3,01:4,02:5');
      ply.matrix.should.be.an["instanceof"](Matrix);
      ply.matrix.all().length.should.be.equal(3);
      return ply.matrix.attackElement('all').length.should.equal(3);
    });
  });
});

// Generated by CoffeeScript 1.6.2
var ModelBase, callback, data, model, should, _id, _model;

ModelBase = require('../model/model_base');

model = new ModelBase();

should = require('should');

data = {
  name: "孙悟空",
  lv: 30,
  hp: 1000,
  atk: 300
};

_id = '123456789';

callback = function(err, item) {
  if (err != null) {
    throw new Error('error occur!');
  }
};

_model = null;

describe('ModelBase, static methods', function() {
  it('create', function() {
    return ModelBase.create(data, function(err, item) {
      should.strictEqual(void 0, err);
      item.should.be.instanceOf(ModelBase);
      item.name.should.be.equal("孙悟空");
      item.lv.should.be.equal(30);
      item.hp.should.be.equal(1000);
      item.atk.should.be.equal(300);
      return ModelBase.remove(item.id, function(err, item) {
        should.strictEqual(void 0, err);
        return item.should.be.ok;
      });
    });
  });
  it('fetch', function() {
    return ModelBase.create(data, function(err, item) {
      should.strictEqual(void 0, err);
      item.should.be.instanceOf(ModelBase);
      ModelBase.fetch(item.id, function(err, result) {
        should.strictEqual(void 0, err);
        result.id.should.be.equal(item.id);
        result.name.should.be.equal("孙悟空");
        result.lv.should.be.equal(30);
        result.hp.should.be.equal(1000);
        return result.atk.should.be.equal(300);
      });
      return ModelBase.remove(item.id, function(err, item) {
        should.strictEqual(void 0, err);
        return item.should.be.ok;
      });
    });
  });
  it('fetchMany', function() {
    return ModelBase.create(data, function(err, item1) {
      should.strictEqual(void 0, err);
      console.log(item1);
      return ModelBase.create(data, function(err, item2) {
        should.strictEqual(void 0, err);
        console.log(item1, item2);
        return ModelBase.fetchMany([item1.id, item2.id], function(err, result) {
          console.log(err, result);
          ModelBase.remove(item1.id, function(err, res) {});
          return ModelBase.remove(item2.id, function(err, res) {});
        });
      });
    });
  });
  it('update', function() {
    return ModelBase.create(data, function(err, item) {
      should.strictEqual(void 0, err);
      item.should.be.instanceOf(ModelBase);
      return ModelBase.update(item.id, {
        lv: 20
      }, function(err, result) {
        should.strictEqual(void 0, err);
        result.should.be.ok;
        return ModelBase.fetch(item.id, function(err, result) {
          should.strictEqual(void 0, err);
          result.name.should.be.equal("孙悟空");
          result.lv.should.be.equal(20);
          result.hp.should.be.equal(1000);
          result.atk.should.be.equal(300);
          return ModelBase.remove(item.id, function(err, item) {
            should.strictEqual(void 0, err);
            return item.should.be.ok;
          });
        });
      });
    });
  });
  return it('remove', function() {
    return ModelBase.create(data, function(err, item) {
      should.strictEqual(void 0, err);
      item.should.be.instanceOf(ModelBase);
      return ModelBase.remove(item.id, function(err, result) {
        should.strictEqual(void 0, err);
        result.should.be.ok;
        return ModelBase.remove(item.id, function(err, result) {
          should.strictEqual(void 0, err);
          return result.should.not.be.ok;
        });
      });
    });
  });
});

describe('ModelBase, instance mothods', function() {
  return it('init', function() {
    var mb;

    mb = new ModelBase(_id, {
      name: 'dahai'
    });
    mb.id.should.be.equal(_id);
    return mb.name.should.be.equal('dahai');
  });
});

// Generated by CoffeeScript 1.6.2
var Battle, Player, PlayerManager, TABLE_DIR, app, battleLog, express, random_liveup, tab, test_data, vs, vs66, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

express = require('express');

test_data = require('./prepare/battle_server_data');

Battle = require('../battle/battle');

Player = require('../battle/player');

PlayerManager = require('../manager/manager').player;

tab = require('../manager/table');

battleLog = require('../battle/battle_log');

TABLE_DIR = (require('./prepare/path')).TABLE_DIR;

tab.reloadTables(TABLE_DIR + 'skills.xml', TABLE_DIR + 'cards.xml');

app = express();

app.get('/6v6', function(req, res) {
  return vs66(function(data) {
    return res.send(data);
  });
});

vs66 = function(cb) {
  var aps;

  aps = test_data.laodTestData();
  return PlayerManager.fetchMany([test_data.player_id5, test_data.player_id6], function(err, result) {
    var attacker, battle, defender, report;

    battle = null;
    attacker = new Player(result[test_data.player_id5]);
    attacker.setLineUp('00:4,01:9,02:129,10:184,11:24,12:204');
    defender = new Player(result[test_data.player_id6]);
    defender.setLineUp('00:50,01:54,02:194,10:200,11:44,12:235');
    battle = new Battle(attacker, defender);
    battleLog.clear();
    battle.process();
    test_data.clearTestData(aps);
    report = battleLog.reports();
    console.log(report);
    console.log(report.steps.length);
    return cb("callback(" + JSON.stringify(report) + ")");
  });
};

app.get('/vs', function(req, res) {
  return vs(function(data) {
    return res.send(data);
  });
});

vs = function(cb) {
  var aps;

  aps = test_data.laodTestData();
  return PlayerManager.fetchMany([test_data.player_id7, test_data.player_id8], function(err, result) {
    var attacker, battle, defender, report;

    console.log(err, result);
    battle = null;
    attacker = new Player(result[test_data.player_id7]);
    attacker.setLineUp(random_liveup(attacker.heros));
    defender = new Player(result[test_data.player_id8]);
    defender.setLineUp(random_liveup(defender.heros));
    battle = new Battle(attacker, defender);
    battleLog.clear();
    battle.process();
    test_data.clearTestData(aps);
    report = battleLog.reports();
    console.log(report);
    console.log(report.steps.length);
    return cb("callback(" + JSON.stringify(report) + ")");
  });
};

_ = require('underscore');

random_liveup = function(heros) {
  var i, ids, lu, pos, r, _i, _ref, _res;

  ids = _.map(heros, function(h) {
    return h.card_id;
  });
  pos = ['00', '01', '02', '10', '11', '12'];
  _res = [];
  while (true) {
    r = _.random(0, 5);
    if (__indexOf.call(_res, r) < 0) {
      _res.push(r);
    }
    if (_res.length >= ids.length) {
      break;
    }
  }
  lu = '';
  for (i = _i = 0, _ref = _res.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    lu += "" + pos[_res[i]] + ":" + ids[i] + ",";
  }
  return lu.slice(0, -1);
};

app.listen('3344');

module.exports = {
  vs: vs,
  vs66: vs66
};

console.log('test server running on http://localhost:3344');
